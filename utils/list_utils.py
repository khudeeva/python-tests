# —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏(—É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è )
# üî¢ –†–∞–±–æ—Ç–∞ —Å —á–∏—Å–ª–∞–º–∏ –≤ —Å–ø–∏—Å–∫–∞—Ö
# —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª
def remove_even(numbers):
    odd_numbers = [x for x in numbers if x % 2 != 0]
    return sorted(odd_numbers, reverse=True)
# –∏—â–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∏—Å–µ–ª
def average_num(numbers):
    return sum(numbers) / len(numbers)
# –∏—â–µ–º —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ 5
def more_that_5(numbers):
    return [x for x in numbers if x > 5]
# —Ñ–∏–ª—å—Ç—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
def filter_unique(numbers):
    return list(set(numbers))

#üìö –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ –≤ —Å–ø–∏—Å–∫–∞—Ö
# –∏—â–µ–º —Å–∞–º—É—é –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–∫–µ
def find_longest_word(words):
    return max(words, key=len)
# –∏—â–µ–º —Å–∞–º—É—é –∫–æ—Ä–æ—Ç–∫—É—é —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–∫–µ
def find_shortest_word(words):
    return min(words, key=len)
# –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞, –¥–ª–∏–Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ 4 —Å–∏–º–æ–≤–ª–æ–≤
def filter_long_words(words):
    long_words = [word for word in words if len(word) > 4]
    return sorted(long_words)
# —É–¥–∞–ª—è–µ–º —Å–ª–æ–≤–∞,–≤ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å "–∞"
def remove_words_with_a(words):
    remove_words = [word for word in words if "–∞" not in word]
    return sorted(remove_words)
# –∏—â–µ–º —Å–ª–æ–≤–∞, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "–º"
def words_starting_with_m(words):
    words_start = [word for word in words if  word.startswith("–º")]
    return sorted(words_start)
# –∏—â–µ–º —Å–ª–æ–≤–∞, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏–µ—Å—è –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ –±—É–∫–≤–æ–π
def same_first_last_letter(words):
    same_letter = [word for word in words if word[0]==word[-1]]
    return sorted(same_letter)
# —Å–ª–æ–∂–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è(–Ω–∞—á–∞–ª–æ —Å "–º", –¥–ª–∏–Ω–∞ –±–æ–ª—å—à–µ 3 —Å–∏–º–≤–æ–ª–æ–≤, –Ω–µ—Ç "–æ")
def difficult_filtered_words(words):
    filter_word = [word for word in words if word.startswith("–º") 
                   and len(word) > 3 
                   and "–æ" not in word
                   ]
    return sorted(filter_word)

# —Å–ª–æ–∂–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ "–º", –¥–ª–∏–Ω–∞ –Ω–µ –º–µ–Ω—å—à–µ 4, –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É)
def transform_m_words(words):
    transform_word = [word.upper() for word in words 
                      if word.startswith("–º")
                      and len(word) >= 4
                      ]
    return sorted(transform_word)

# –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤ –ø–æ –¥–ª–∏–Ω–µ
def capitalize_long_words(words):
    capitalize_word = [word.capitalize() for word in words
                       if len(word) > 3
                       ]
    return sorted(capitalize_word)

# —É–¥–∞–ª—è–µ–º —Å–ª–æ–≤–∞ —Å —á–µ—Ç–Ω–æ–π –¥–ª–∏–Ω–æ–π
def remove_even_length(words):
    even_length = [word for word in words if len(word)% 2 != 0]
    return sorted(even_length)

# –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞ –≤ –¥–ª–∏–Ω—ã
def word_lengths(words):
    lengths = [len(word) for word in words]
    return lengths

# üß©–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–ª–∏–Ω–µ –∏ –ø–µ—Ä–≤—ã–º –±—É–∫–≤–∞–º
# –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ —Å "—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–π" –¥–ª–∏–Ω–æ–π
def filter_by_allowed_lengths(words, allowed_lengths):
    filter_lengths = [word for word in words 
                      if len(word) in allowed_lengths
                      ]
    return sorted(filter_lengths)

# –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ –ø–æ –¥–ª–∏–Ω–µ –∏ –ø–µ—Ä–≤–æ–π –±—É–∫–≤–µ
def filter_by_lengths_and_start(words, allowed_lengths, allowed_starts):
    result = [word for word in words 
              if len(word) in allowed_lengths
              and word[0] in allowed_starts
              ]
    return sorted(result)


# üîÅ–†–∞–±–æ—Ç–∞ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏
# –∏—â–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
def clean_names(names):
    clean = set(names)
    return sorted(clean)

# –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –±–æ–ª—å—à–µ 1 —Ä–∞–∑–∞
def find_duplicates(names):
    seen_once = set()
    duplicates = set()
    
    for name in names:
        if name in seen_once:
            duplicates.add(name)
        else:
            seen_once.add(name)
    return sorted(duplicates)

# –∏—â–µ–º –∏–º–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –¢–û–õ–¨–ö–û –æ–¥–∏–Ω —Ä–∞–∑
def find_unique_names(names):
    seen_once = set()
    duplicates = set()

    for name in names:
        if name in seen_once:
            duplicates.add(name)
        else:
            seen_once.add(name)
    unique_name = (seen_once - duplicates)
    return  sorted(unique_name)

# —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ
def remove_duplicates(lst):
    unique_items = []
    for item in lst:
        if item not in unique_items:
            unique_items.append(item)
    return unique_items

# —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –±–æ–ª—å—à–µ 1 —Ä–∞–∑–∞
def remove_repeated(lst):
    return [ item for item in lst if lst.count(item) == 1]

print("\n get_even_numbers")
def get_even_numbers(lst):
    only_even_list = []
    for x in lst:
        if x % 2 == 0:
            only_even_list.append(x)
    return  only_even_list      

