from text_utils import (count_vowels, is_title_and_multiple_words,filtered_words, is_long_word, sort_by_last_letter, longest_word,
    filter_by_first_letter, shortest_word, closest_to_average,
    filter_by_vowels_count, filter_vowel_words, filter_consonant_words,
    filter_two_vowels, filter_even_length, filter_same_first_last,
    filter_unique_letters, filter_repeated_letters, count_words,
    most_frequent_word, least_frequent_word, count_sentences,
    replace_letters, word_lengths, replace_digits, divided_sentences,
    replace_words, extract_numbers, filtered_words_len, find_words,
    find_dates, find_unique_words, filter_by_unique_letters,
    get_user_info, most_vowels_word, is_alpha_only, is_palindrome, greet_user, count_vowels_practice
)

# üî¢ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —á–∏—Å–ª–∞–º–∏
from math_utils import(
    multiply, greet, apply_operation, apply_multiple_operations,
    filter_numbers, sort_by_key, apply_operations, sum_of_squares,
    average, double, power, find_median, sum_even_all, multiply_odd_all,
    max_difference, average_arifmetic, average_square,
    filter_by_digits_sum, sum_of_digits, is_big_and_divisible, is_even
)

# üìö –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏
from list_utils import (
    remove_even, clean_names, find_duplicates, find_unique_names,
    find_longest_word, find_shortest_word, filter_long_words,
    remove_words_with_a, words_starting_with_m, same_first_last_letter,
    difficult_filtered_words, average_num, more_that_5,
    transform_m_words, capitalize_long_words, remove_even_length,
    word_lengths, filter_by_allowed_lengths, filter_by_lengths_and_start,
    remove_duplicates, remove_repeated, filter_unique
)

# üß© –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º–∏
from set_utils import (
    unique_numbers, count_unique, common_numbers, unique_from_first,
    unique_numbers_from_both, has_common_elements, is_subset,
    is_disjoint, has_duplicates, count_unique_pages, unique_users,
    who_didnt_submit, unique_email, common_products, unique_words,
    who_skipped
)

# üß† –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ —Å–ª–æ–≤–∞—Ä—è–º–∏
from dict_utils import (
    get_user_names, keys_list, name_id_pairs, names_id, get_active_users,
    get_inactive_users, find_admins, find_role_active, format_user_roles,
    count_roles, find_users, find_orders, find_pets, find_class,
    find_only_class, find_repeated_names, find_repeated_roles,
    find_unique_roles, find_users_with_unique_roles,
    find_unique_vegan_dishes, find_all_keys, find_inactive_users,
    find_unique_role_today, update_dict, dict_summary, get_skills, get_task_count, knows_python, top_user, all_skills, has_tasks
)

# ‚ú® –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Å *args, **kwargs, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ç–∏–ø–∞–º
from flex_utils import (
    multiply_all, user_profile, sum_all, car_info, total_sum,
    filter_strings, filter_numbers_kwargs, count_strings,
    summarize_and_collect_strings, find_booleans, count_booleans,
    person_details, calculate_stats, add_all, max_from_args, count_positives, greet_user_kwargs, is_qa_user, describe_user, user_summary, summarize_person, profile_summary
)

print(multiply(3, 7))  # 21

print(greet()) # –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ì–æ—Å—Ç—å!
print(greet("–ê–Ω–Ω–∞")) # –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–Ω–Ω–∞!
    
print(multiply_all(1, 2, 3)) # 6
print(multiply_all(2, 4, 6)) # 48

user_profile(name="Ksenia", age=25, city="Perm")

# –ò—Å–ø–æ–ª—å–∑—É—é apply_operation() —Å –ª—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü–∏—è–º–∏
print(apply_operation(lambda x, y: x+ y, 10, 5)) # 15
print(apply_operation(lambda x, y: x - y, 10, 5)) #5
print(apply_operation(lambda x, y: x / y, 10, 5)) # 2

# –ø–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π
operations = [
    lambda x, y: x + y,
    lambda x, y: x * y,
    lambda x, y: x - y
]
print(apply_multiple_operations(operations, 5, 3))

# —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á–∏—Å–ª–µ–Ω –ø–æ —É—Å–ª–æ–≤–∏—é
numbers = [10, 15, 20, 25, 30, 35]

# —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —á—ë—Ç–Ω—ã–µ —á–∏—Å–ª–∞
even_numbers = filter_numbers(numbers, lambda x: x % 2 == 0)
print(even_numbers)

# —Ñ–∏–ª—å—Ç—Ä—É–µ–º —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ 20
greater_than_20 = filter_numbers(numbers, lambda x: x > 20)
print(greater_than_20)

# —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ª—é–¥–µ–π –ø–æ –∫–ª—é—á—É
people = [
    {"name": "–ê–Ω–Ω–∞", "age": 25},
    {"name": "–ò–≤–∞–Ω", "age": 30},
    {"name": "–ú–∞—Ä–∏—è", "age": 22}
]

# –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
sorted_by_age = sort_by_key(people, lambda person: person["age"])
print(sorted_by_age)

# —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ–≤–∞, —Å lambda: –¥–ª–∏–Ω–∞ –±–æ–ª—å—à–µ 5 —Å–∏–º–≤–æ–ª–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—Ç "–∞"
words = ["—è–±–ª–æ–∫–æ", "–≥—Ä—É—à–∞", "–∞—Ä–±—É–∑", "–∞–ø–µ–ª—å—Å–∏–Ω", "–ø–µ—Ä—Å–∏–∫", "—Å–ª–∏–≤–∞"]
filtered = filtered_words(words, lambda word: len(word) > 5 and "–∞" in word)
print(filtered)

# –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø—Ä–µ–∞—Ü–∏–π 
operations = [
lambda x, y: x + y,
lambda x, y: x * y,
lambda x, y: x ** y
]
print(apply_operations(operations, 2, 3))

# –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –±—É–∫–≤–µ
words = [ "–∫–æ—Ç", "—Å–æ–±–∞–∫–∞", "–ø–∏—Ç–æ–Ω", "–∞–Ω–∞–Ω–∞—Å", "—ë–∂–∏–∫"]
sorted_words = sort_by_last_letter(words)
print(sorted_words)

# –ò—â–µ–º —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –≤ —Å–ø–∏—Å–∫–µ
words = ["–∫–æ—Ç", "—Å–æ–±–∞–∫–∞", "—Å–ª–æ–Ω", "–º–µ–¥–≤–µ–¥—å", "—ë–∂–∏–∫"]
print(longest_word(words))

# —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ–≤–∞ –ø–æ –Ω–∞—á–∞–ª—å–Ω–æ–π –±—É–∫–≤–µ
words = ["–∞–Ω–∞–Ω–∞—Å", "–∞–ø–µ–ª—å—Å–∏–Ω", "–∞—Ä–±—É–∑", "–±–∞–Ω–∞–Ω", "–∞–±—Ä–∏–∫–æ—Å"]
print(filter_by_first_letter(words, "–∞"))

# –≤—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ —á–∏—Å–ª–∞:
numbers = [1, 2, 3, 4]
print(sum_of_squares(numbers))

# –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–∞
print(is_palindrome("—Ç–æ–ø–æ—Ç"))
print(is_palindrome("—à–æ—Ä–æ—Ö"))
print(is_palindrome("—Ä–∞–¥–∞—Ä"))
print(is_palindrome("–ê —Ä–æ–∑–∞ —É–ø–∞–ª–∞ –Ω–∞ –ª–∞–ø—É –ê–∑–æ—Ä–∞"))

# –ø–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–ª–∞—Å–Ω—ã—Ö
print(count_vowels("–ø—Ä–∏–≤–µ—Ç"))
print(count_vowels("–æ–±—É—á–µ–Ω–∏–µ"))
print(count_vowels("–¢–µ–¢—Ä–ê–¥—å"))
print(count_vowels("—Å–∞–º–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"))
 
 # –∏—â–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ
print(average([1, 2, 3, 4, 5]))  # 3.0
print(average([10, 20, 30]))  # 20.0
print(average([7, 14, 21, 28]))  # 17.5
print(average([])) # 0

# –∏—â–µ–º —Å–∞–º–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–ª–æ–≤–æ
words = ["–º–∞—à–∏–Ω–∞", "—Ç–µ–ª–µ–≤–∏–∑–æ—Ä", "–∫–æ—Ç", "–∏–º–º—É–Ω–∏—Ç–µ—Ç"]
print(shortest_word(words))

# –∏—â–µ–º —Å–ª–æ–≤–æ —Å –¥–ª–∏–Ω–æ–π –±–ª–∏–∂–µ –∫ —Å—Ä–µ–¥–Ω–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
words = ["–º–∞—à–∏–Ω–∞", "—Ç–µ–ª–µ—Ñ–æ–Ω", "–∫–æ—Ç","–ø–ª–∞–Ω–µ—Ç–∞","–¥–æ–º"]
print(closest_to_average(words))

# —É–¥–≤–æ–µ–Ω–∏–µ —á–∏—Å–ª–∞
print(double(10))
print(double(7))

# –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
print(power(3))
print(power(2, 5))

# —Å—É–º–º–∏—Ä—É–µ–º –≤—Å–µ —á–∏—Å–ª–∞ —Å *args
print(sum_all(1, 2, 3, 4, 5))
print(sum_all(10, 20, 30))

# –∏—â–µ–º —Å—É–º–º—É –≤—Å–µ—Ö —á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª
numbers = [3, 10, 7, 4, 12, 5, 8, 21, 6, 14]
print(sum_even_all(numbers))

# –∏—â–µ–º –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ—á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª
numbers = [2, 3, 5, 7, 8, 10, 11, 13, 15]
print(multiply_odd_all(numbers))

# –∏—â–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —á–∏—Å–ª–∞–º–∏
numbers = [20, 5, 15, 30, 50, 10]
print(max_difference(numbers))

# –∏—â–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ 
numbers = [10, 15, 20, 25, 30, 35]
print(average_arifmetic(numbers))

# –∏—â–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ 
numbers = [10, 20, 30, 40, 50]
print(average_square(numbers))

# —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–ª–∞—Å–Ω—ã—Ö
words = ["–ø–æ–≥–æ–¥–∞", "–∫–æ—Ç", "–º–∞—à–∏–Ω–∞", "–æ–∫–Ω–æ", "—Å—Ç–æ–ª"]
print(filter_by_vowels_count(words, 2))

# —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ —Å–ø–∏—Å–∫–µ
numbers = [1, 2, 3, 2, 4, 1, 5]
print(remove_duplicates(numbers)) 

# —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –±–æ–ª—å—à–µ 1 —Ä–∞–∑–∞
numbers = [1, 2, 3, 2, 4, 1, 5]
print(remove_repeated(numbers))

# —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö—Å—è –≥–ª–∞—Å–Ω—ã–µ –±—É–∫–≤—ã
words = ["–¥–æ–º", "–∫—Ä—Ç", "–º–æ—Å—Ç", "—Å—Ç—É–ª", "—è–±–ª–æ–∫–æ"]
print(filter_vowel_words(words))

# —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –Ω–∞ —Å–æ–≥–ª–∞—Å–Ω—É—é –±—É–∫–≤—É
words = ["–º–æ—Å—Ç", "—Ä–µ–∫–∞", "–≥—Ä—É—à–∞", "—Å—Ç–æ–ª", "–ª–∏—Å—Ç"]
print(filter_consonant_words(words)) 

# —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –±–æ–ª—å—à–µ/= 2 –≥–ª–∞—Å–Ω—ã—Ö –≤ —Å–ª–æ–≤–µ
words = ["–º–æ—Å—Ç", "—Ä–µ–∫–∞", "–≥—Ä—É—à–∞", "—Å—Ç–æ–ª", "–ª–∏—Å—Ç", "–æ–∫–µ–∞–Ω"]
print(filter_two_vowels(words))

# —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ–≤–∞, –µ–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤ –≤ —Å–ª–æ–≤–µ
words = ["–∫–æ—Ç", "—Å—Ç–æ–ª", "–º–æ—Å—Ç", "–¥–≤–µ—Ä—å", "–æ–∫–Ω–æ"]
print(filter_even_length(words))

# —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ª–æ–≤, –≥–¥–µ –ø–µ—Ä–≤–∞—è –∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –±—É–∫–≤—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
words = ["–º–∞–º–∞", "–∫–æ–∫–æ—Å", "—Å—Ç–æ–ª", "–∞–Ω–∞–Ω–∞—Å", "—Ä–µ–∫–∞", "—Ç–æ–ø–æ—Ç"]
print(filter_same_first_last(words))

# —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±—É–∫–≤—ã
words = ["–∫–æ—Ç", "–º–∞–º–∞", "–ª–∏—Å—Ç", "—Å–æ—Å–Ω–∞", "–¥–æ–º"]
print(filter_unique_letters(words))

# —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ª–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è –±—É–∫–≤–∞–º–∏
words = ["–∫–æ—Ç", "–º–∞–º–∞", "–ª–∏—Å—Ç", "—Å–æ—Å–Ω–∞", "–¥–æ–º", "—Ä–µ–∫–∞", "—à–∞—Ä"]
print(filter_repeated_letters(words)) 

# —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á–∏—Å–µ–ª –ø–æ —Å—É–º–º–µ —Ü–∏—Ñ—Ä
numbers = [10, 23, 34, 47, 58, 99]
print(filter_by_digits_sum(numbers, 10))

# —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ª–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±—É–∫–≤
words = ["–ø–∞–ø–∞", "–∞–Ω–∞–Ω–∞—Å", "–∫–Ω–∏–≥–∞", "–¥–æ–º", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç"]
print(filter_by_unique_letters(words, 5))

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—É–º–º—ã —Ü–∏—Ñ—Ä —á–∏—Å–ª–∞
print(sum_of_digits(123))  
print(sum_of_digits(789))

# –ø–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ
print(count_words("–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?"))  # 3
print(count_words("Python –ª—É—á—à–∏–π —è–∑—ã–∫"))  # 3
print(count_words("–û–¥–∏–Ω"))  # 1

# –∏—â–µ–º —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –≤ —Å—Ç—Ä–æ–∫–µ
print(longest_word("–°–æ–ª–Ω—Ü–µ —Å–≤–µ—Ç–∏—Ç —è—Ä–∫–æ"))  # "–°–æ–ª–Ω—Ü–µ"
print(longest_word("–Ø –∏–∑—É—á–∞—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"))  # "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"

# –ø—Ä–æ–µ—Ä–∫–∞ –Ω–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–µ
print(is_palindrome("—Ç–æ–ø–æ—Ç"))  # True
print(is_palindrome("–∫–∞–∑–∞–∫"))  # True
print(is_palindrome("–¥–æ–º"))  # False

# –∏—â–µ–º —Å–∞–º–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–ª–æ–≤–æ –≤ —Ç–µ–∫—Å—Ç–µ
print(shortest_word("–Ø –ª—é–±–ª—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"))  # "–Ø"
print(shortest_word("Python –ª—É—á—à–∏–π —è–∑—ã–∫"))  # "—è–∑—ã–∫"
print(shortest_word(12345))  # "–û—à–∏–±–∫–∞: –Ω–µ —Å—Ç—Ä–æ–∫–∞"

# –∏—â–µ–º —Å–ª–æ–≤–æ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–ª–∞—Å–Ω—ã—Ö
print(most_vowels_word("–ê–ª–∏—Å–∞ –ª—é–±–∏—Ç –º–∞—Ç–µ–º–∞—Ç–∏–∫—É"))  # "–º–∞—Ç–µ–º–∞—Ç–∏–∫—É"
print(most_vowels_word("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ"))  # "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"
print(most_vowels_word(12345))  # "–û—à–∏–±–∫–∞: –Ω–µ —Å—Ç—Ä–æ–∫–∞"

# –∑–∞–º–µ–Ω–∞ –±—É–∫–≤ –≤ —Ç–µ–∫—Å—Ç–µ
print(replace_letters("–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!", "–∏", "—ã"))  # "–ü—Ä—ã–≤—ã—Ç, –º—ã—Ä!"
print(replace_letters("hello world", "o", "0"))   # "hell0 w0rld"

# —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤ –≤ –∫–∞–∂–¥–æ–º —Å–ª–æ–≤–µ
print(word_lengths("–ü—Ä–∏–≤–µ—Ç –º–∏—Ä"))  # [6, 3]
print(word_lengths("–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞"))  # [3, 9, 6]

# –≤—ã–±–∏—Ä–∞–µ–º —Å–∞–º–æ–µ —á–∞—Å—Ç–æ–µ —Å–ª–æ–≤–æ –≤ —Ç–µ–∫—Å—Ç–µ
print(most_frequent_word("–∫–æ—Ç —Å–æ–±–∞–∫–∞ –∫–æ—Ç –∫–æ—Ç —Å–æ–±–∞–∫–∞ –¥–æ–º")) # "–∫–æ—Ç"

# –∏—â–µ–º —Å–∞–º–æ–µ —Ä–µ–¥–∫–æ–µ —Å–ª–æ–≤–æ –≤ —Ç–µ–∫—Å—Ç–µ
print(least_frequent_word("—è–≥–æ–¥–∞ –º–∞–ª–∏–Ω–∞ —è–≥–æ–¥–∞  —è–≥–æ–¥–∞")) # –º–∞–ª–∏–Ω–∞

# —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç–µ
print(count_sentences("–Ø –∏–∑—É—á–∞—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ? –î–∞, –≤–µ—Ä–Ω–æ! –≠—Ç–æ –æ—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ, –Ω–æ –Ω—É–∂–Ω–æ."))

# –∑–∞–º–µ–Ω–∞ –≤—Å–µ—Ö —Ü–∏—Ñ—Ä –≤ —Ç–µ–∫—Å—Ç–µ –Ω–∞ *
print(replace_digits("–ü—Ä–∏–≤–µ—Ç, 98! –ú–æ–π –Ω–æ–º–µ—Ä 123-456."))  # –û–∂–∏–¥–∞–µ–º: "–ü—Ä–∏–≤–µ—Ç, **! –ú–æ–π –Ω–æ–º–µ—Ä ***-***."

# –¥–µ–ª–∏–º —Ç–µ–∫—Å—Ç –ø–æ ,.!
print(divided_sentences("–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞! –í—Å—ë —Ö–æ—Ä–æ—à–æ. –£–≤–∏–¥–∏–º—Å—è –ø–æ–∑–∂–µ!"))

# –∑–∞–º–µ–Ω–∞ –≤—Å–µ—Ö –±—É–∫–≤ "–∞" –∏ "–æ" –Ω–∞ * –≤ —Ç–µ–∫—Å—Ç–µ
print(replace_words("–ú–æ—è –∫–æ—à–∫–∞ –æ–±–æ–∂–∞–µ—Ç –∞–ø–µ–ª—å—Å–∏–Ω—ã"))

# –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞
print(extract_numbers("–ú–æ–π –Ω–æ–º–µ—Ä 456-789, –∞ —Ç–≤–æ–π 123-456?"))

# –∏—â–µ–º —Å–ª–æ–≤–∞ —Å –¥–ª–∏–Ω–æ–π –æ—Ç 4 –¥–æ 6 –±—É–∫–≤
print(find_words("–∞–ø–µ–ª—å—Å–∏–Ω, —è–±–ª–æ–∫–æ, —è–∫–æ—Ä—å, –º–∞—à–∏–Ω–∞"))

# –∏—â–µ–º –≤—Å–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
text = "–°–µ–≥–æ–¥–Ω—è 12.03.2024, –∞ –∑–∞–≤—Ç—Ä–∞ 13.03.2024. –ê –µ—â—ë 01.01.2025."
print(find_dates(text))  # ['12.03.2024', '13.03.2024', '01.01.2025']

# –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂
print(get_user_info("–ê–Ω–Ω–∞", 25, "–ú–æ—Å–∫–≤–∞"))

# —Ñ–∏–ª—å—Ç—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
print(filter_unique([1, 2, 2, 3, 4, 4, 5]))

# –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –≤ —Å–ª–æ–≤–∞—Ä—å
print(update_dict({"name": "–ò–≤–∞–Ω", "age": 30}))

# –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è
print(dict_summary({"name": "Ksenia", "age": 25}))

print("\n get_skills")
print(get_skills("ksenia"))
print(get_skills("anna"))

print("\n get_task_count")
print(get_task_count("ksenia"))
print(get_task_count("lena"))

print("\n know_python")
print(knows_python("ksenia"))
print(knows_python("lena"))

print("\n top_users")
# —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–¥–∞–µ–º –∏–∑–≤–Ω–µ
tasks_data = { 
    "ksenia": 5,
    "dima": 3,
    "lena": 7
}
print(top_user(tasks_data))

print("\n all_skills")
print(all_skills({
    "ksenia": ["Python", "SQL"],
    "dima": ["HTML", "CSS", "SQL"],
    "anna": ["Python", "Postman"]
}))

print("\n has_tasks")
print(has_tasks("dima"))   
print(has_tasks("anna"))   
print(has_tasks("oleg"))   


# –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤
print(find_unique_words("–Ø –ª—é–±–ª—é Python. Python - —ç—Ç–æ –∫—Ä—É—Ç–æ!"))

# –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π 
print(unique_numbers([1, 2, 2, 3, 4, 4, 5]))

# –∏—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª –≤ —Å–ø–∏—Å–∫–µ
print(count_unique([1, 2, 2, 3, 4, 4, 5]))

# –∏—â–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤ –¥–≤—É—Ö —Å–ø–∏—Å–∫–∞—Ö
list1 = [1, 2, 3, 4, 5]
list2 = [4, 5, 6, 7]
print(common_numbers(list1, list2))

# –∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤–æ –≤—Ç–æ—Ä–æ–º 
list1 = [1, 2, 3, 4, 5]
list2 = [3, 4, 5, 6, 7]
print(unique_from_first(list1, list2))

# –∏—â–µ–º —á–∏—Å–ª–∞ –∫–æ—Ç–æ—Ä–µ –µ—Å—Ç—å –¢–û–õ–¨–ö–û –≤ –æ–¥–Ω–æ–º –∏–∑ –¥–≤—É—Ö —Å–ø–∏—Å–∫–æ–≤
list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]
print(unique_numbers_from_both(list1, list2))

# –∏—â–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤ —Å–ø–∏—Å–∫–∞—Ö –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 1 –æ–±—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
list1 = [10, 20, 30]
list2 = [40, 50, 30]
print(has_common_elements(list1, list2))

# –∏—â–µ–º –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ
list1 = [1, 2]
list2 = [1, 2, 3, 4]
print(is_subset(list1, list2))

# –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏–º–µ—é—Ç –ª–∏ –¥–≤–∞ —Å–ø–∏—Å–∫–∞ –æ–±—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
print(is_disjoint([1, 2, 3], [4, 5, 6]))  #True  
print(is_disjoint([1, 2, 3], [3, 4, 5]))  #False

# –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
print(has_duplicates([1, 2, 3, 4, 5]))      # False ‚Äî –≤—Å—ë —É–Ω–∏–∫–∞–ª—å–Ω–æ
print(has_duplicates([1, 2, 2, 3, 4, 5]))   # True ‚Äî –µ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä

# —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
visited_pages = ["/home", "/about", "/home", "/products", "/contact", "/products", "/home"]
print(count_unique_pages(visited_pages))

# –∏—â–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç
users = ["–ê–Ω—è", "–ë–æ—Ä–∏—Å", "–ê–Ω—è", "–ì–ª–µ–±", "–ë–æ—Ä–∏—Å", "–ï–≤–∞"]
print(unique_users(users))

# –∏—â–µ–º –∫—Ç–æ –Ω–µ —Å–¥–∞–ª —Ä–∞–±–æ—Ç—É, –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
all_students = ["–ê–Ω—è", "–ë–æ—Ä–∏—Å", "–ì–ª–µ–±", "–ï–≤–∞", "–î–∏–º–∞"]
submitted = ["–ì–ª–µ–±", "–ê–Ω—è", "–ï–≤–∞"]
print(who_didnt_submit(all_students, submitted))

#–ø—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email
emails = ["a@test.com", "b@test.com", "a@test.com", "c@test.com"]
print(unique_email(emails))

# –∏—â–µ–º –æ–±—â–∏–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
cart1 = ["–º–æ–ª–æ–∫–æ", "—Ö–ª–µ–±", "—Å—ã—Ä", "—Å–æ–∫"]
cart2 = ["—á–∞–π", "—Ö–ª–µ–±", "—Å—ã—Ä", "–≤–æ–¥–∞"]
print(common_products(cart1, cart2))

# –∏—â–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
text = "Hello world hello Python python code"
print(unique_words(text))

# –∏—â–µ–º –∫—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏–ª –ª–µ–∫—Ü–∏—é(–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É)
group = ["–ê–Ω—è", "–ë–æ—Ä–∏—Å", "–í–∏–∫–∞", "–ì–ª–µ–±", "–î–∞–Ω–∏–ª"]
present = ["–í–∏–∫–∞", "–ì–ª–µ–±", "–ê–Ω—è"]
print(who_skipped(group, present))


users = {
    101: "–ê–Ω—è",
    102: "–ë–æ—Ä–∏—Å",
    103: "–ì–ª–µ–±",
    104: "–ï–≤–∞"
}
print(get_user_names(users))# –ø–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å–ª–æ–≤–∞—Ä—è(+—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É)
print(keys_list(users))# –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª—é—á–µ–π(id)
print(name_id_pairs(users))# –ø–æ–ª—É—á–∞–µ–º –ø–∞—Ä—ã –≤ –≤–∏–¥–µ "–∏–º—è - id"
print(names_id(users)) # –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏ "ID: –∏–º—è", —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏


users = {
    "–ê–Ω—è": True,
    "–ë–æ—Ä–∏—Å": False,
    "–ì–ª–µ–±": True,
    "–ï–≤–∞": False,
    "–î–∞–Ω–∏–ª": True
}
print(get_active_users(users))# –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å = True
print(get_inactive_users(users))# –∏—â–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π == False



users = {
    "–ê–Ω—è": {"role": "admin", "active": True},
    "–ë–æ—Ä–∏—Å": {"role": "user", "active": False},
    "–ì–ª–µ–±": {"role": "admin", "active": True},
    "–ï–≤–∞": {"role": "user", "active": False},
    "–î–∞–Ω–∏–ª": {"role": "user", "active": True}
}
print(find_admins(users))# –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª–∏
print(find_role_active(users))# –∏—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é "user"
print(format_user_roles(users))# —Å–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ "–ò–º—è (—Ä–æ–ª—å)"
print(count_roles(users))# —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª—è–º
# –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ä–æ–ª—å—é –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é:
print(find_users(users, role="user", only_active=True)) 
print(find_users(users, role="user", only_active=False))  
print(find_users(users, role="admin", only_active=True))  

# –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∑–∞–∫–∞–∑–æ–º –µ–¥—ã(+ vegan)
orders = {
    "–ê–Ω—è": {"dish": "–ø–∏—Ü—Ü–∞", "is_vegan": False},
    "–ë–æ—Ä–∏—Å": {"dish": "—Å–∞–ª–∞—Ç", "is_vegan": True},
    "–ì–ª–µ–±": {"dish": "–±—É—Ä–≥–µ—Ä", "is_vegan": False},
    "–ï–≤–∞": {"dish": "–æ–≤–æ—â–Ω–æ–π –±–æ—É–ª", "is_vegan": True},
}

print(find_orders(orders, dish="—Å–∞–ª–∞—Ç", only_vegan=True)) # ['–ë–æ—Ä–∏—Å']
print(find_orders(orders, dish="–ø–∏—Ü—Ü–∞", only_vegan=False)) # ['–ê–Ω—è']

# –∏—â–µ–º –ø—Å–æ–≤ –∏ –∏—Ö –∏–º–µ–Ω–∞
pets = {
    "–ú—É—Ä–∑–∏–∫": {"type": "–∫–æ—Ç", "age": 2},
    "–®–∞—Ä–∏–∫": {"type": "–ø—ë—Å", "age": 5},
    "–†–µ–∫—Å": {"type": "–ø—ë—Å", "age": 3},
}
print(find_pets(pets))


class_a = ["–ê–Ω—è", "–ë–æ—Ä–∏—Å", "–ì–ª–µ–±", "–ï–≤–∞"]
class_b = ["–ì–ª–µ–±", "–î–∞–Ω–∏–ª", "–ï–≤–∞", "–ñ–∞–Ω–Ω–∞"]
print(find_class(class_a, class_b))# –ò—â–µ–º —É—á–µ–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É—á–∞—Ç—Å—è –≤ –æ–±–æ–∏—Ö –∫–ª–∞—Å—Å–∞—Ö
print(find_only_class(class_a, class_b))# –ò—â–µ–º —É—á–µ–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É—á–∞—Ç—Å—è –¢–û–õ–¨–ö–û  –≤ –æ–¥–Ω–æ–º –∏–∑ 2—Ö –∫–ª–∞—Å—Å–æ–≤ 


# –∏—â–µ–º –∏–º–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –±–æ–ª—å—à–µ 1 —Ä–∞–∑–∞
names = ["–ê–Ω—è", "–ë–æ—Ä–∏—Å", "–ê–Ω—è", "–ì–ª–µ–±", "–ï–≤–∞", "–ì–ª–µ–±", "–ê–Ω—è"]
print(find_repeated_names(names))

users = {
    "–ê–Ω—è": {"role": "admin", "active": True},
    "–ë–æ—Ä–∏—Å": {"role": "user", "active": False},
    "–ì–ª–µ–±": {"role": "admin", "active": True},
    "–ï–≤–∞": {"role": "user", "active": False},
    "–î–∞–Ω–∏–ª": {"role": "user", "active": True},
    "–ñ–∞–Ω–Ω–∞": {"role": "manager", "active": True}
}
print(find_repeated_roles(users)) # –∏—â–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
print(find_unique_roles(users))# –∏—â–µ–º —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑
print(find_users_with_unique_roles(users))# –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Ä–æ–ª—å—é


orders = {
    "–ê–Ω—è": {"dish": "–ø–∏—Ü—Ü–∞", "vegan": False},
    "–ë–æ—Ä–∏—Å": {"dish": "—Å–∞–ª–∞—Ç", "vegan": True},
    "–ì–ª–µ–±": {"dish": "–ø–∏—Ü—Ü–∞", "vegan": False},
    "–ï–≤–∞": {"dish": "—Å–∞–ª–∞—Ç", "vegan": True},
    "–î–∞–Ω–∏–ª": {"dish": "–æ–≤–æ—â–Ω–æ–π –±–æ—É–ª", "vegan": True},
    "–ñ–∞–Ω–Ω–∞": {"dish": "—Ç–æ—Ñ—É", "vegan": True}
}
print(find_unique_vegan_dishes(orders))

# –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª—é—á–µ–π –≤ —Å–ª–æ–≤–∞—Ä–µ, –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
data = {
    "orange": 3,
    "apple": 5,
    "banana": 2
}
print(find_all_keys(data))


# –∏—â–µ–º –º–µ–¥–∏–∞–Ω—É
print(find_median(10, 20, 30, 40, 50))
print(find_median(1, 3, 5, 7))
print(find_median(2, 8, 10, 12, 14))
print(find_median(4, 6, 8, 10))
# –ò—â–µ–º, –∫—Ç–æ –Ω–µ –∑–∞—Ö–æ–¥–∏–ª –Ω–∞ —Å–∞–π—Ç —Å–µ–≥–æ–¥–Ω—è
all_users = ["–ê–Ω—è", "–ë–æ—Ä–∏—Å", "–ì–ª–µ–±", "–ï–≤–∞", "–î–∞–Ω–∏–ª"]
active_today = ["–ì–ª–µ–±", "–ï–≤–∞"]
print(find_inactive_users(all_users, active_today))

# –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Ä–æ–ª—å—é, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–≥–æ–¥—è–Ω –Ω–µ –∑–∞—Ö–æ–¥–∏–ª–∏ –Ω–∞ —Å–∞–π—Ç
users = {
    "–ê–Ω—è": {"role": "admin"},
    "–ë–æ—Ä–∏—Å": {"role": "user"},
    "–ì–ª–µ–±": {"role": "admin"},
    "–ï–≤–∞": {"role": "user"},
    "–î–∞–Ω–∏–ª": {"role": "user"},
    "–ñ–∞–Ω–Ω–∞": {"role": "manager"}
}

active_today = ["–ì–ª–µ–±", "–ï–≤–∞"]
print(find_unique_role_today(users, active_today))  

# —É–¥–∞–ª—è–µ–º —á–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print(remove_even(numbers))


names = ["–ê–Ω—è", "–ë–æ—Ä–∏—Å", "–ê–Ω—è", "–ì–ª–µ–±", "–ï–≤–∞", "–ì–ª–µ–±", "–ê–Ω—è"]
print(clean_names(names)) # –∏—â–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
print(find_duplicates(names)) # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –±–æ–ª—å—à–µ 1 —Ä–∞–∑–∞
print(find_unique_names(names)) # –∏—â–µ–º –∏–º–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –¢–û–õ–¨–ö–û –æ–¥–∏–Ω —Ä–∞–∑

words = ["–∫–æ—Ç", "–±–µ–≥–µ–º–æ—Ç", "—Å–ª–æ–Ω", "–∞–Ω–∞–∫–æ–Ω–¥–∞", "–º—ã—à—å"]
print(find_longest_word(words))# –∏—â–µ–º —Å–∞–º—É—é –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–∫–µ
print(find_shortest_word(words)) # —Å–∞–º–∞—è –∫–æ—Ä–æ—Ç–∫–∞—è —Å—Ç—Ä–æ–∫–∞
print(filter_long_words(words)) # –∏—â–µ–º —Å–ª–æ–≤–∞ —Å –¥–ª–∏–Ω–æ–π –±–æ–ª—å—à–µ 4 —Å–∏–º–≤–æ–ª–æ–≤
print(remove_words_with_a(words)) # —É–¥–∞–ª—è–µ–º —Å–ª–æ–≤–∞ —Å "–∞"
print(words_starting_with_m(words)) # –∏—â–µ–º —Å–ª–æ–≤–∞, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è –Ω–∞ "–º"
print(same_first_last_letter(words)) # –∏—â–µ–º —Å–ª–æ–≤–∞, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏–µ–π—Å—è –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ –±—É–∫–≤–æ–π
print(difficult_filtered_words(words))



numbers = [3, 7, 2, 10, 5]
print(average_num(numbers)) # –∏—â–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 
print(more_that_5(numbers)) # –∏—â–µ–º —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ 5

words = ["–∫–æ—Ç", "–º–æ–ª–æ–∫–æ", "–∞—Ä–±—É–∑", "–º—ã—à—å", "–¥–æ–º", "–º–∞–∫", "–º–∞–º–∞"]
print(transform_m_words(words)) # —Å–ª–æ–∂–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ "–º", –¥–ª–∏–Ω–∞ –Ω–µ –º–µ–Ω—å—à–µ 4, –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É)

print("\n capitalize_long_words")
print(capitalize_long_words(words)) # –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤ –ø–æ –¥–ª–∏–Ω–µ

print("\n remove_even_length")
print(remove_even_length(words)) # —É–¥–∞–ª—è–µ–º —Å–ª–æ–≤–∞ —Å —á–µ—Ç–Ω–æ–π –¥–ª–∏–Ω–æ–π

print("\n word_lengths")
print(word_lengths(words)) # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞ –≤ –¥–ª–∏–Ω—ã

allowed_lengths = [3, 5]
print("\n filter_by_allowed_lengths")
print(filter_by_allowed_lengths(words, allowed_lengths)) # –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ —Å "—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–π" –¥–ª–∏–Ω–æ–π 

allowed_lengths = [3, 4]
allowed_starts = ["–º", "—á"]
print("\n filter_by_lengths_and_start")
print(filter_by_lengths_and_start(words, allowed_lengths, allowed_starts))

print("\n is_even") # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ç–Ω–æ—Å—Ç—å —á–∏—Å–ª–∞
print(is_even(5))
print(is_even(8))

print("\n is_long_word") # –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–ª–∏–Ω–∞ —Å–ª–æ–≤–∞ –±–æ–ª—å—à–µ 5
print(is_long_word("–∞—Ä–±—É–∑"))
print(is_long_word("–ø–∞–ª–∞–º–µ—Ä–∞"))


print("\n is_big_and_divisible") # –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 10 –∏ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 3
print(is_big_and_divisible(9))
print(is_big_and_divisible(90))
print(is_big_and_divisible(12))


print("\n is_title_and_multiple_words")# –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª—å—à–µ 1 —Å–ª–æ–≤–∞
print(is_title_and_multiple_words("–ø—Ä–∏–≤–µ—Ç"))
print(is_title_and_multiple_words(" –ø—Ä–∏–≤–µ—Ç –ø–æ–∫–∞"))
print(is_title_and_multiple_words("–ü—Ä–∏–≤–µ—Ç"))
print(is_title_and_multiple_words("–ü—Ä–∏–≤–µ—Ç –ø–æ–∫–∞"))

print("\n is_alpha_only")# –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –±–µ–∑ —Ü–∏—Ñ—Ä –∏ —Å–∏–º–≤–æ–ª–æ–≤
print(is_alpha_only("–ü—Ä–∏–≤–µ—Ç"))
print(is_alpha_only("–ø—Ä–∏–≤–µ—Ç:)"))
print(is_alpha_only("–≤—ã–ø–µ–π –≤–æ–¥—ã"))
print(is_alpha_only("113"))

print("\n total_sum") # –∏—â–µ–º —Å—É–º–º—É –≤—Å–µ—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö —á–∏—Å–µ–ª
print(total_sum(1, 2, 3))
print(total_sum(10, 20, 30))
print(total_sum())

print("\n filter_strings") # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏
print(filter_strings(name="Anna", age=25, city="Moscow"))

print("\n filter_numbers_kwargs") # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞
print(filter_numbers_kwargs(name="Anna", age=30, height=1.68, active=True))

print("\n count_strings")#—Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
print(count_strings(name="Anna", age=30, city="Moscow", height = 1.7))

print("\n summarize_and_collect_strings") # —Å—É–º–º–∏—Ä—É–µ–º *args, –∞ –∏–∑ **kwargs –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏
print(summarize_and_collect_strings(1, 2, 3, name="anna", age=30, city="Perm"))

print("\n find_booleans") # –∏—â–µ–º –∫–ª—é—á–∏, –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–∑ –±—É–ª–µ–≤—ã–µ
print(find_booleans(active=True, name="–ê–Ω—è", verified=False, age=25))

print("\n count_booleans") # —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
print(count_booleans(active=False, name="Anna", age=30, verified=True))

print("\n multiply_all") # –ø–µ—Ä–µ–º–Ω–æ–∂–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —á–∏—Å–ª–∞
print(multiply_all(2, 3, 4))
print(multiply_all(11, 5))

print("\n add_all") # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É–º–º—É –≤—Å–µ—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö —á–∏—Å–µ–ª
print(add_all(1, 2, 3))
print(add_all(10, 5))
print(add_all(0, 0))
print(add_all(-10, -20))

print("\n max_from_args")
print(max_from_args(3, 5, 1))
print(max_from_args(10))
print(max_from_args(-10))
print(max_from_args())

print("\n count_positives")
print(count_positives(1, -2, 3, -4, 0))
print(count_positives(-1, -2))
print(count_positives())

print("\n greet_user_kwargs")
print(greet_user_kwargs(name = "Ksenia", age = 25))
print(greet_user_kwargs(name="Dima"))
print(greet_user_kwargs())

print("\n is_qa_user")
print(is_qa_user(name = "Ksenia", is_qa = True))
print(is_qa_user(name="Dima", is_qa = False))
print(is_qa_user(name="Anna"))

print("\n describe_user")
print(describe_user(name="Ksenia", city="Perm", is_active = True))
print(describe_user(name = "Dima", is_active = False))

print("\n user_summary")
print(user_summary("Ksenia", "Python", "SQL", city = "Perm", experience = 2))

print("\n summarize_person")
print(summarize_person("Ksenia", "Python", "SQL", city = "Perm", age = 25, is_active = True))

print("\n profile_summary")
print(profile_summary("Ksenia", "Fitness", "Dance", country = "Russia", verified = True))
# –ü–û–í–¢–û–†–ï–ù–ò–ï
print(greet_user("Max"))

print(count_vowels_practice("–ü—Ä–∏–≤–µ—Ç"))
print(count_vowels_practice("–°–æ–ª–Ω—Ü–µ —è—Å–Ω–æ–µ"))

