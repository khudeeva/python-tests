# —Ñ—É–Ω–∫—Ü–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º–∏(–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è, –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–∞)

# üìå—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –ø–æ–¥—Å—á–µ—Ç—ã
# –∏—â–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
def unique_numbers(numbers):
    unique_numbers = set(numbers)
    return(unique_numbers)

# –∏—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª –≤ —Å–ø–∏—Å–∫–µ
def count_unique(numbers):
    unique = set(numbers)
    return len(unique)

# –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
def has_duplicates(lts):
    return len(lts) != len(set(lts))

# –ø–æ–¥—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
def count_unique_pages(visited_pages):
    unique_pages = set(visited_pages)
    return len(unique_pages) 

# –∏—â–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ(–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –∏ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
def unique_words(text):
    words = text.split()
    lower_words = [word.lower() for word in words]
    unique_words = set(lower_words)
    return sorted(unique_words)
# –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email
def unique_email(emails):
    unique_email = set(emails)
    return len(emails) == len(set(emails))

# –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ, —Ä–∞–∑–Ω–æ—Å—Ç–∏, —Å–∏–º–º–µ—Ç—Ä–∏—á–µ—Å–∫–µ —Ä–∞–∑–Ω–æ—Å—Ç–∏

# –∏—â–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤ –¥–≤—É—Ö —Å–ø–∏—Å–∫–∞—Ö
def common_numbers(list1, list2):
   set1 = set(list1)
   set2 = set(list2)
   return list(set1 & set2)

# –∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤–æ –≤—Ç–æ—Ä–æ–º 
def unique_from_first(list1, list2):
    set1 = set(list1)
    set2 = set(list2)
    return list(set1 - set2)

# –∏—â–µ–º —á–∏—Å–ª–∞ –∫–æ—Ç–æ—Ä–µ –µ—Å—Ç—å –¢–û–õ–¨–ö–û –≤ –æ–¥–Ω–æ–º –∏–∑ –¥–≤—É—Ö —Å–ø–∏—Å–∫–æ–≤
def unique_numbers_from_both(list1, list2):
    set1 = set(list1)
    set2 = set(list2)
    return list(set1 ^ set2)

# –∏—â–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤ —Å–ø–∏—Å–∫–∞—Ö –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 1 –æ–±—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
def has_common_elements(list1, list2):
    set1 = set(list1)
    set2 = set(list2)
    return len(set1 & set2) > 0 # return bool(set1 & set2)


# üß©–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –º–µ–∂–¥—É –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º–∏
# –∏—â–µ–º –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ
def is_subset(list1, list2):
    set1 = set(list1)
    set2 = set(list2)
    return set1 <= set2

# –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏–º–µ—é—Ç –ª–∏ –¥–≤–∞ —Å–ø–∏—Å–∫–∞ –æ–±—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
def is_disjoint(list1, list2):
    set1 = set(list1)
    set2 = set(list2)
    return len(set1 & set2) == 0


# üßæ–ü—Ä–∏–∫–ª–∞–¥–Ω—ã–µ –∑–∞–¥–∞—á–∏(—É—á—ë–±–∞, –ø–æ–∫—É–ø–∫–∏)

# –∏—â–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
def unique_users(users):
    unique_users = set(users)
    sorted_users = sorted(unique_users) # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    return sorted_users

# –∏—â–µ–º –∫—Ç–æ –Ω–µ —Å–¥–∞–ª —Ä–∞–±–æ—Ç—É, –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
def who_didnt_submit(all_students, submitted):
    set1 = set(all_students)
    set2 = set(submitted)
    return sorted(list(set1 - set2))

# –∏—â–µ–º –æ–±—â–∏–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
def common_products(cart1, cart2):
    set1 = set(cart1)
    set2 = set(cart2)
    return sorted(list(set1 & set2))

# –∏—â–µ–º –∫—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏–ª –ª–µ–∫—Ü–∏—é
def who_skipped(groups, present):
    set1 = set(groups)
    set2 = set(present)
    return  sorted(list(set1 - set2))