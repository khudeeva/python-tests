# —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —á–∏—Å–ª–∞–º–∏(—á—ë—Ç–Ω–æ—Å—Ç—å, —Å—É–º–º—ã, –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞)
from math import prod
import math
# üìå–ê—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞ –∏ –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
# —É–º–Ω–æ–∂–µ–Ω–∏–µ
def multiply (a, b):
    return a * b

# —É–¥–≤–æ–µ–Ω–∏–µ —á–∏—Å–ª–∞
def double(x):
    return (x * 2)

# –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
def power(x, y=2):
    return(x ** y)

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—É–º–º—ã —Ü–∏—Ñ—Ä —á–∏—Å–ª–∞
def sum_of_digits(num):
    return  sum(int(digit) for digit in str(num))

#  –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ç–Ω–æ—Å—Ç–∏ —á–∏—Å–ª–∞
def is_even(number):
    return number % 2 == 0


# üîÅ–†–∞–±–æ—Ç–∞ —Å –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏ —á–∏—Å–µ–ª(—Å—É–º–º–∞, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, –∞–Ω–∞–ª–∏–∑)
# —Å—É–º–º–∞ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ —á–∏—Å–µ–ª
def sum_of_squares(numbers):
    return sum(x ** 2 for x in numbers) 
# –∏—â–µ–º —Å—É–º–º—É –≤—Å–µ—Ö —á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª
def sum_even_all(numbers):
    return sum(x for x in numbers if x % 2 == 0)

# –∏—â–µ–º –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ—á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª:
def multiply_odd_all(numbers):
    return prod(x for x in numbers if x % 2 == 1)
# –∏—â–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ
def average(numbers):
    return sum(numbers) / len(numbers) if numbers else 0

# –∏—â–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ
def average_arifmetic(numbers):
    return sum(numbers) / len(numbers)

# –∏—â–µ–º —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —á–∏—Å–µ–ª
def average_square(numbers):
    average = sum(numbers) / len(numbers) # –∏—â–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ
    squared_differences = [(x - average) ** 2 for x in numbers] #–∫–≤–∞–¥—Ä–∞—Ç —Ä–∞–∑–Ω–∏—Ü—ã –∫–∞–∂–¥–æ–≥–æ —á–∏—Å–ª–∞
    variance = sum(squared_differences) / len(numbers) # —Å—Ä–µ–¥–Ω–µ–µ —ç—Ç–∏—Ö –∫–≤–∞–¥—Ä–∞—Ç–æ–≤
    return math.sqrt(variance) # –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–æ—Ä–µ–Ω—å 
# –∏—â–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —á–∏—Å–ª–∞–º–∏
def max_difference(numbers):
    maximum = max(numbers)
    minimum = min(numbers)
    return max(numbers) - min(numbers)
# —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á–∏—Å–µ–ª –ø–æ —Å—É–º–º–µ —Ü–∏—Ñ—Ä
def filter_by_digits_sum(numbers, min_sum):
    return [num for num in numbers if sum(int(digit) for digit in str(num)) > min_sum]
# —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á–∏—Å–µ–ª
def filter_numbers(numbers, condition):
    return[num for num in numbers if condition(num)]


#  üß†–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∏ –ª—è–º–±–¥–∞
# –ø–µ—Ä–µ–¥–∞—á–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ + –ª—è–±–¥–∞-—Ñ—É–Ω–∫—Ü–∏–∏
def apply_operation(func, a, b):
    return func(a,b)

# –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
def apply_multiple_operations(operations, a, b):
    return [func(a,b) for func in operations] # –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å–ø–∏—Å–∫—É –§ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –∫–∞–∂–¥—É—é
# –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø—Ä–µ—Ä–∞—Ü–∏–π
def apply_operations(operations, a, b):
    return[func(a,b) for func in operations]

# üî¢–†–∞–±–æ—Ç–∞ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –∏ –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
# —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –∫–ª—é—á–æ–º
def sort_by_key(data, key_func):
    return sorted(data, key=key_func) # –∏—Å–ø–æ–ª—å–∑—É–µ–º key_func –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏

# üßÆ–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
# –Ω–∞—Ö–æ–¥–∏–º –º–µ–¥–∏–∞–Ω—É - —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ
def find_median(*numbers):
    numbers = sorted(numbers) # —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
    n = len(numbers) # —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª
    middle = n // 2 # –Ω–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Å–µ—Ä–µ–¥–∏–Ω—ã
    if n % 2 == 1: # –µ—Å–ª–∏ –Ω–µ—á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
        return numbers[middle]
    else: # –µ—Å–ª–∏ —á–µ—Ç–Ω–æ–µ - –±–µ—Ä–µ–º —Å—Ä–µ–¥–Ω–µ–µ 2—Ö —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª
        return(numbers[middle -1] + numbers[middle]) / 2



#‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ (–±—É–ª–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)


# –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 10 –∏ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 3
def is_big_and_divisible(number):
    return number > 10 and number % 3 == 0


# –†–∞–∑–Ω–æ–µ 
def greet(name="–ì–æ—Å—Ç—å"):
    return(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!")
