# –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–æ–∞–Ω–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å *args, **kwargs, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ç–∏–ø–∞–º
from math import prod
# üåü–†–∞–±–æ—Ç–∞ —Å *args(—Å—É–º–º–∞, –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
# –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤  
def multiply_all(*args):
    return prod(args)
# —Å—É–º–º–∏—Ä—É–µ–º –≤—Å–µ —á–∏—Å–ª–∞ —Å *args
def sum_all(*args):
    result = 0
    for num in args:
        result = result + num
    return result
# –∏—â–µ–º —Å—É–º–º—É –≤—Å–µ—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö —á–∏—Å–µ–ª
def total_sum(*args):
    return sum(args)
# –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö —á–∏—Å–µ–ª
def multiply_all(*args):
    result = 1
    for x in args:
        result *= x
    return result
# –≤—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É, —Å—Ä–µ–¥–Ω–µ–µ, –º–∞–∫—Å–∏–º—É–º –∏ –º–∏–Ω–∏–º—É–º
def calculate_stats(*numbers):
    total = sum(numbers)
    average = total / len(numbers)
    maximum = max(numbers)
    minimum = min(numbers)

    print(f"–°—É–º–º–∞: {total}")
    print(f"–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {average}")
    print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {maximum}")
    print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {minimum}")


calculate_stats(10, 20, 30, 40, 50)


# üåüüåü–†–∞–±–æ—Ç–∞ —Å **kwargs

# –∫–ª—é—á–µ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
def user_profile(**kwargs):
    for key, value in kwargs.items():
        print(f"{key} : {value}")

# –∏–º–µ–Ω–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã **kwargs
def car_info(**kwargs):
    for key, value in kwargs.items():
        print(f"{key} : {value}")
car_info(brand="Toyota", year=2022, color="blue")

# –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ 
def filter_strings(**kwargs):
    new_dict = {} #—Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
    for key, value in kwargs.items(): # –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ª–æ–≤–∞–º –∏ –∑–Ω–∞—á–µ–Ω–∏—è–º
        if isinstance(value, str):
            new_dict[key] = value
    return new_dict

# –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
def filter_numbers_kwargs(**kwargs):
    new_dict = {}
    for key, value in kwargs.items():
        if isinstance(value,(int, float)) and not isinstance(value, bool):
            new_dict[key] = value
    return new_dict

# —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
def count_strings(**kwargs):
    count = 0
    for key, value in kwargs.items():
        if isinstance(value, str):
            count +=1
    return count

# –ò—â–µ–º –∫–ª—é—á–∏, –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –±—É–ª–µ–≤—ã–µ (True\False)
def find_booleans(**kwargs):
    booleans = []
    for key, value in kwargs.items():
        if isinstance (value, bool):
            booleans.append(key)
    return booleans

# —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
def count_booleans(**kwargs):
    count = 0
    for key, value in kwargs.items():
        if isinstance(value, bool):
            count += 1
    return count 

#üîó –°–º–µ—à–∞–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ *args –∏ **kwargs
# —Å—É–º–º–∏—Ä—É–µ–º *args, –∞ –∏–∑ **kwargs –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏
def summarize_and_collect_strings(*args, **kwargs):
    strings = [] # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è kwargs
    for key, value in kwargs.items():
        if isinstance(value, str):
            strings.append(value) # –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ø–∏—Å–æ–∫
    return sum(args), strings

# –æ–±—ä–µ–¥–∏–Ω—è–µ–º * args, **kwargs
def person_details(name, *hobbies, **info):
    print(f"{name}")
    print(f"hobbies:", hobbies)
    print("–î–æ–ø–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    for key,value in info.items():
        print(f"{key} : {value}")

person_details("Ksenia", "Reading", "Travelling", age=25, city="Perm")

# –ü–û–í–¢–û–†–ï–ù–ò–ï
def add_all(*numbers):
    return sum(numbers)

def multiply_all(*numbers):
    return prod(numbers)

def max_from_args(*numbers):
    if not numbers:
        return None
    return max(numbers)

def count_positives(*numbers):
    return sum(1 for number in numbers if number > 0)

def greet_user_kwargs(**kwargs):
    if "name" in kwargs and "age" in kwargs:
        return f"–ü—Ä–∏–≤–µ—Ç, {kwargs['name']}! –¢–µ–±–µ {kwargs['age']} –ª–µ—Ç."
    else:
        return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"
    
def describe_person(**kwargs):
    if "name" in kwargs and "age" in kwargs and "role" in kwargs:
        return f"–ò–º—è: {kwargs['name']}, –í–æ–∑—Ä–∞—Å—Ç: {kwargs['age']}, –†–æ–ª—å: {kwargs['role']}"
   
def is_qa_user(**kwargs):
    if "is_qa" in kwargs and kwargs['is_qa'] == True:
        return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - QA"
    else:
        return" –ù–µ QA"
   
def describe_user(**kwargs):
    if "name" in kwargs and "city" in kwargs and "is_active" in kwargs:
        return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {kwargs['name']} –∏–∑ {kwargs['city']}. –ê–∫—Ç–∏–≤–µ–Ω: {kwargs['is_active']}"
    else:
        return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
    
def user_summary(name, *skills, **info):
    skill_str = ",".join(skills) if skills else "–Ω–∏—á–µ–≥–æ"
    city = info.get("city", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    experience = info.get("experience", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –∑–Ω–∞–µ—Ç: {skill_str}. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –≥–æ—Ä–æ–¥ - {city}, –æ–ø—ã—Ç -  {experience} –≥–æ–¥–∞"

def summarize_person(name, *skills, **details):
    skill = ",".join(skills) if skills else "–Ω–∏—á–µ–≥–æ"
    city = details.get("city", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    age = details.get("age", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    is_active = details.get("is_active", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    return f"–ò–º—è: {name}. –ù–∞–≤—ã–∫–∏: {skill}. –î–µ—Ç–∞–ª–∏: –≥–æ—Ä–æ–¥ - {city}, –≤–æ–∑—Ä–∞—Å—Ç - {age}, –∞–∫—Ç–∏–≤–µ–Ω - {is_active}"

def profile_summary(name, *interests, **meta):
    interest = ",".join(interests) if interests else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    country = meta.get("country", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    verified = meta.get("verified", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    return f"–ò–º—è: {name}. –ò–Ω—Ç–µ—Ä–µ—Å—ã: {interest}. –î–µ—Ç–∞–ª–∏: —Å—Ç—Ä–∞–Ω–∞ -  {country}, –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω - {verified}"