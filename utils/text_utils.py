import re

# üî£–ø–æ–¥—Å—á–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤
# —Å—á–∏—Ç–∞–µ–º –≥–ª–∞—Å–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–µ
def count_vowels(text):
    vowels = "–∞–µ—ë–∏–æ—É—ã—ç—é—è–ê–ï–Å–ò–û–£–´–≠–Æ–Ø"
    return sum(1 for letter in text if letter in vowels)

#–ø–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ
def count_words(text):
    if not isinstance(text, str):
        return "–û—à–∏–±–∫–∞: –Ω–µ —Å—Ç—Ä–æ–∫–∞"
    words = text.split()
    return len(words)
# —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç–µ
def count_sentences(text):
    if not isinstance(text, str):
        return "–û—à–∏–±–∫–∞: –Ω–µ —Å—Ç—Ä–æ–∫–∞"
    sentences = re.split(r'[.!?]', text)
    sentences = [s.strip() for s in sentences if s.strip()]
    return len(sentences)

# üî§–ø—Ä–æ–≤–µ—Ä–∫–∏
# –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª—å—à–µ 1 —Å–ª–æ–≤–∞
def is_title_and_multiple_words(text):
    return text[0].isupper() and len(text.split()) > 1
# –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã
def is_alpha_only(text):
    return text.isalpha()
# –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–∞
def is_palindrome(word):
    word = word.lower().replace(" ", "") # –¥–µ–ª–∞–µ–º –±—É–∫–≤—ã –º–∞–ª–µ–Ω—å–∫–∏–º–∏, —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É –Ω–∏–º–∏
    return word == word[::-1] # —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–ª–æ–≤–æ —Å –µ–≥–æ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–π –≤–µ—Ä—Å–∏–µ–π



# üßπ—É–¥–∞–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤
# –∑–∞–º–µ–Ω–∞ –≤—Å–µ—Ö —Ü–∏—Ñ—Ä –≤ —Ç–µ–∫—Å—Ç–µ –Ω–∞ *
def replace_digits(text):
    if not isinstance(text, str):
        return "–û—à–∏–±–∫–∞: –Ω–µ —Å—Ç—Ä–æ–∫–∞"
    return re.sub(r'\d','*', text)
# –∑–∞–º–µ–Ω–∞ –≤—Å–µ—Ö –±—É–∫–≤ "–∞" –∏ "–æ" –Ω–∞ * –≤ —Ç–µ–∫—Å—Ç–µ
def replace_words(text):
    if not isinstance(text, str):
        return "–û—à–∏–±–∫–∞: –Ω–µ —Å—Ç—Ä–æ–∫–∞"
    return re.sub(r'[–∞–æ]', '*', text) # –Ω–µ—Å–∫–æ–ª—å–∫–æ –±—É–∫–≤ –∑–∞–∫–ª—é—á–∏ –≤ []


# üìè—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–ª–∏–Ω–µ –∏ –¥—Ä—É–≥–∏–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º
# –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å–ª–æ–≤–∞
def is_long_word(word):
    return len(word) > 5
# –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –±—É–∫–≤–µ
def sort_by_last_letter(words):
    return sorted(words, key=lambda word: word[-1]) #—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–∏–º–≤–æ–ª—É —Å–ª–æ–≤–∞
# –∏—â–µ–º —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –≤ —Å—Ç—Ä–æ–∫–µ
def longest_word(text):
    if not isinstance(text, str):
        return "–û—à–∏–±–∫–∞: –Ω–µ —Å—Ç—Ä–æ–∫–∞"
    words = text.split()
    return max(words, key=len)
# –∏—â–µ–º —Å–∞–º–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–ª–æ–≤–æ –≤ —Ç–µ–∫—Å—Ç–µ
def shortest_word(text):
    if not isinstance(text, str):
        return "–û—à–∏–±–∫–∞: –Ω–µ —Å—Ç—Ä–æ–∫–∞"
    words = text.split()
    return min(words, key=len)
# –∏—â–µ–º —Å–ª–æ–≤–æ —Å –¥–ª–∏–Ω–æ–π –±–ª–∏–∂–µ –∫ —Å—Ä–µ–¥–Ω–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
def closest_to_average(words):
    avg_length = sum(len(word) for word in words) / len(words)
    return min(words, key=lambda word: abs(len(word) - avg_length))
# —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ–≤–∞ –ø–æ –Ω–∞—á–∞–ª—å–Ω–æ–π –±—É–∫–≤–µ
def filter_by_first_letter(words, letter):
    return[word for word in words if word.startswith(letter)]
# —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö—Å—è –≥–ª–∞—Å–Ω—ã–µ –±—É–∫–≤—ã
def filter_vowel_words(words):
    vowels = "–∞–µ—ë–∏–æ—É—ã—ç—é—è"
    return [word for word in words if any( letter in vowels for letter in word)] 
# —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ª–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±—É–∫–≤
def filter_by_unique_letters(words, max_unique):
    return[word for word in words if len(set(word)) <= max_unique]


# üìä–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–æ–≤ —Å–ª–æ–≤
 #—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–ª–∞—Å–Ω—ã—Ö
def filter_by_vowels_count(words, min_vowels):
    vowels = "–∞–µ—ë–∏–æ—É—ã—ç—é—è–ê–ï–Å–ò–û–£–´–≠–Æ–Ø"
    return [word for word in words if sum(1 for letter in word if letter in vowels) >=min_vowels]
# —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –Ω–∞ —Å–æ–≥–ª–∞—Å–Ω—É—é –±—É–∫–≤—É
def filter_consonant_words(words):
    vowels = "–∞–µ—ë–∏–æ—É—ã—ç—é—è"
    return [word for word in words if word[0] not in vowels and word[-1] not in vowels]

   # —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ–≤–∞, –∫—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç  –±–æ–ª—å—à–µ/= 2 –≥–ª–∞—Å–Ω—ã—Ö 
def filter_two_vowels(words):
    vowels = "–∞–µ—ë–∏–æ—É—ã—ç—é—è"
    return [word for word in words if sum(1 for letter in word if letter in vowels) >= 2]

# —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤ –≤ —Å–ª–æ–≤–µ
def filter_even_length(words):
    return [word for word in words if len(word) % 2 == 0]

# —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ª–æ–≤, –≥–¥–µ –ø–µ—Ä–≤–∞—è –∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –±—É–∫–≤—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
def filter_same_first_last(words):
    return [word for word in words if  word[0] == word[-1]]

# —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±—É–∫–≤—ã
def filter_unique_letters(words):
    return[word for word in words if len(set(word)) == len(word)]

# —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ª–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è –±—É–∫–≤–∞–º–∏
def filter_repeated_letters(words):
    return[word for word in words if len(set(word)) < len(word)]


# üìö–†–∞–±–æ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–º 
# –∑–∞–º–µ–Ω–∞ –±—É–∫–≤ –≤ —Ç–µ–∫—Å—Ç–µ
def replace_letters(text, old, new):
    if not isinstance(text, str):
        return "–û—à–∏–±–∫–∞: –Ω–µ —Å—Ç—Ä–æ–∫–∞"
    return text.replace(old, new)
# —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤  –≤ –∫–∞–∂–¥–æ–º —Å–ª–æ–≤–µ
def word_lengths(text):
    if not isinstance(text, str):
        return "–û—à–∏–±–∫–∞: –Ω–µ —Å—Ç—Ä–æ–∫–∞"
    words = text.split()
    return [len(word) for word in words] 
# –≤—ã–±–∏—Ä–∞–µ–º —Å–∞–º–æ–µ —á–∞—Å—Ç–æ–µ —Å–ª–æ–≤–æ –≤ —Ç–µ–∫—Å—Ç–µ
def most_frequent_word(text):
    if not isinstance(text, str):
        return "–û—à–∏–±–∫–∞: –Ω–µ —Å—Ç—Ä–æ–∫–∞"
    words = text.split()
    return max(words, key=words.count)

# –∏—â–µ–º —Å–∞–º–æ–µ —Ä–µ–¥–∫–æ–µ —Å–ª–æ–≤–æ –≤ —Ç–µ–∫—Å—Ç–µ
def least_frequent_word(text):
    if not isinstance(text, str):
        return "–û—à–∏–±–∫–∞: –Ω–µ —Å—Ç—Ä–æ–∫–∞"
    words = text.split()
    return min(words, key=words.count)
# –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—Å—Ç–µ —Å–ª–æ–≤–∞ –¥–ª–∏–Ω–æ–π –æ—Ç 4 –¥–æ 6 —Å–∏–º–≤–æ–ª–æ–≤
def filtered_words_len(text):
    if not isinstance(text, str):
        return "–û—à–∏–±–∫–∞: –Ω–µ —Å—Ç—Ä–æ–∫–∞"
    words = text.split()
    return [word for word in words if 4 <= len(word) <= 6]
# –∏—â–µ–º —Å–ª–æ–≤–æ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–ª–∞—Å–Ω—ã—Ö
def most_vowels_word(text):
    if not isinstance(text, str):
        return "–û—à–∏–±–∫–∞: –Ω–µ —Å—Ç—Ä–æ–∫–∞"
    
    vowels = "–∞–µ—ë–∏–æ—É—ã—ç—é—è"
    words = text.split()

    return max(words, key=lambda word: sum(1 for letter in word if letter in vowels))



# üì•–†–∞–±–æ—Ç–∞ —Å —Ä–µ–≥—É–ª—è—Ä–∫–∞–º–∏
# –¥–µ–ª–∏–º —Ç–µ–∫—Å—Ç –ø–æ ,.!
def divided_sentences(text):
    if not isinstance(text, str):
        return "–û—à–∏–±–∫–∞: –Ω–µ —Å—Ç—Ä–æ–∫–∞"
    sentences = re.split(r'[,.!]', text) # —Ä–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ –∑–Ω–∞–∫–∞–º –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
    sentences = [s.strip() for s in sentences if s.strip()] # —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    return(sentences)
# –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞
def extract_numbers(text):
    if not isinstance(text, str):
        return "–û—à–∏–±–∫–∞: –Ω–µ —Å—Ç—Ä–æ–∫–∞"
    return re.findall(r'\d+', text) # –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ –≥—Ä—É–ø–ø—ã —Ü–∏—Ñ—Ä
# –∏—â–µ–º –≤—Å–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
def find_dates(text):
    if not isinstance(text, str):
        return "–û—à–∏–±–∫–∞: –Ω–µ —Å—Ç—Ä–æ–∫–∞"
    return re.findall(r'\b\d{2}\.\d{2}\.\d{4}\b', text)
# –∏—â–µ–º —Å–ª–æ–≤–∞ —Å –¥–ª–∏–Ω–æ–π –æ—Ç 4 –¥–æ 6 –±—É–∫–≤
def find_words(text):
    if not isinstance(text, str):
        return "–û—à–∏–±–∫–∞: –Ω–µ —Å—Ç—Ä–æ–∫–∞"
    return re.findall(r'\b\w{4,6}\b', text)


# üåà–ü—Ä–æ—á–µ–µ
# –∏—â–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞(–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π, –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
def find_unique_words(text):
    if not isinstance(text, str):
        return "–û—à–∏–±–∫–∞: –Ω–µ —Å—Ç—Ä–æ–∫–∞"
    words = re.findall(r'\b\w+\b', text.lower())
    return list(set(words))
# —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ –ø–æ –¥–ª–∏–Ω–µ –∏ –Ω–∞–ª–∏—á–∏—é –±—É–∫–≤ (lambda)
def filtered_words(words, condition):
    return[word for word in words if condition(word)]
# –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂
def get_user_info(name, age, city):
    return(name, age, city)