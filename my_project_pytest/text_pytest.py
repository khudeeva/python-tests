import re
import pytest

# –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É 
def reverse_string(text):
    return text[::-1]

# —Å—á–∏—Ç–∞–µ–º –≥–ª–∞—Å–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–µ
def count_vowels(text):
    vowels = "–∞–µ—ë–∏–æ—É—ã—ç—é—è–ê–ï–Å–ò–û–£–´–≠–Æ–Ø"
    return sum(1 for letter in text if letter in vowels)

# –¥–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π
def capitalize_first(text):
    if not text: #–µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        return ""
    return text[0].upper() + text[1:] # –¥–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π, –æ—Å—Ç–∞–ª—å–Ω–æ–µ - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å 
# –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã
def is_alpha_only(text):
    return text.isalpha()

# –ø—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–æ–π
def is_upper(text):
    return text[:1].isupper()

# —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏–∑ —Å—Ç—Ä–æ–∫
def remove_spaces(text):
    return text.replace(" ", "")

# —É–¥–∞–ª—è–µ–º –≤—Å–µ —Ü–∏—Ñ—Ä—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
def remove_digits(text):
   return ''.join(char for char in text if not char.isdigit())

# –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã
def extract_letters(text):
    return ''.join(char for char in text if char.isalpha())

# –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–∞
def is_palindrome(word):
    word = word.lower().replace(" ", "") # –¥–µ–ª–∞–µ–º –±—É–∫–≤—ã –º–∞–ª–µ–Ω—å–∫–∏–º–∏, —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É –Ω–∏–º–∏
    return word == word[::-1] # —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–ª–æ–≤–æ —Å –µ–≥–æ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–π –≤–µ—Ä—Å–∏–µ–π

#üîç –ø–∞–ª–∏–Ω–¥—Ä–æ–º—ã
# –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
def is_palindrome_sentence(text):
    clean = ''.join(c.lower() for c in text if c.isalpha())
    return clean == clean[::-1]


# –¥–µ–ª–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –≤ —Å—Ç—Ä–æ–∫–µ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã, –æ—Å—Ç–∞–ª—å–Ω—ã–µ - —Å—Ç—Ä–æ—á–Ω—ã–µ
def capitalize_word(text):
    return ' '.join(word.capitalize() for word in text.split())

# –∏—â–µ–º —Å–ª–æ–≤–∞, –¥–ª–∏–Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ min_length
def filtered_by_length(text, min_length):
    words = text.split()
    return [word for word in words if len(word) >= min_length]

# —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–ª–∏–Ω–µ –∏ –ø–µ—Ä–≤–æ–π –±—É–∫–≤–µ
def filtered_by_length_and_start(text, min_length, start_letter):
    words = text.split()
    return [word for word in words if len(word)>= min_length
            and word.startswith(start_letter)]


# —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø—Ä–µ–¥–ª–µ–Ω–Ω–æ–π –¥–ª–∏–Ω—ã, –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –Ω–∞ –±—É–∫–≤—É –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –±—É–∫–≤—É
def filter_advanced(text, min_length, start_letter, forbidden_letter):
    words = text.split()
    return [word for word in words if len(word)>= min_length
            and word.startswith(start_letter)
            and forbidden_letter not in word
            ]

# —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –≤ —Å—Ç—Ä–æ–∫–µ
def invert_words(text):
    words = text.split()
    return ' '.join (word[::-1] for word in words)


# —Å—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∞—Å—å –±—É–∫–≤–∞ –≤ —Å—Ç—Ä–æ–∫–µ –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞
def count_letter_frequency(text, letter):
    text = text.lower()
    letter = letter.lower()
    return sum(1 for char in text if char == letter)

# –ø—Ä–∏–Ω–∏–º–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
def analyze_string(text):
    if text.isspace(): # ! –≤–∞–∂–µ–Ω –ø–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è 
        return "–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã"
    elif not text.strip():
        return "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞"
    elif text.isdigit():
        return "–¶–∏—Ñ—Ä—ã"
    elif text.isalpha():
        return "–ë—É–∫–≤—ã"
    elif not any(char.isalnum() for char in text): #–Ω–µ—Ç –Ω–∏ –±—É–∫–≤, –Ω–∏ —Ü–∏—Ñ—Ä
        return "–¢–æ–ª—å–∫–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã"
    else:
        return "–°–º–µ—à–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞"

# –∞–Ω–∞–ª–∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞ —Å—Ç—Ä–æ–∫–∏
def analyze_case(text):
    if text.isupper():
        return "–í—Å–µ –±—É–∫–≤—ã –∑–∞–≥–ª–∞–≤–Ω—ã–µ"
    elif text.islower():
        return "–í—Å–µ –±—É–∫–≤—ã —Å—Ç—Ä–æ—á–Ω—ã–µ"
    elif not any(char.isalpha() for char in text):
        return "–ù–µ—Ç –±—É–∫–≤"
    else:
        return "–°–º–µ—à–∞–Ω–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä"

# –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏ –∏ —Ç–æ—á–∫–∞ –≤ –∫–æ–Ω—Ü–µ
def describe_string(text):
    if text[0].isupper() and text.endswith("."):
        return "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
    elif text[0].isupper() and not text.endswith("."):
        return "–ù–µ—Ç —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ"
    elif not text[0].isupper() and text.endswith("."):
        return "–ù–µ—Ç –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã –≤ –Ω–∞—á–∞–ª–µ"
    else:
        return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞"

# –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–µ–º —Å–ª–æ–≤–æ –ø–æ –≥–ª–∞—Å–Ω—ã–º,—Å–æ–≥–ª–∞—Å–Ω—ã–º
def classify_word(word):
    vowels = "–∞–µ—ë–∏–æ—É—ã—ç—é—è"
    consonants = "–±–≤–≥–¥–∂–∑–π–∫–ª–º–Ω–ø—Ä—Å—Ç—Ñ—á—Ü—á—à—â"
    letters = [char.lower() for char in word if char.isalpha()]
    
    if not letters:
        return "–ù–µ—Ç –±—É–∫–≤"
    elif all(char in vowels for char in letters):
        return "–¢–æ–ª—å–∫–æ –≥–ª–∞—Å–Ω—ã–µ"
    elif all(char in consonants for char in letters):
        return "–¢–æ–ª—å–∫–æ —Å–æ–≥–ª–∞—Å–Ω—ã–µ"
    else:
        return "–°–º–µ—à–∞–Ω–Ω–æ–µ"
    
# –ò—â–µ–º "–±–æ–≥–∞—Ç–æ–µ —Å–ª–æ–≤–æ"(–µ—Å–ª–∏ –±–æ–ª—å—à–µ 3 –≥–ª–∞—Å–Ω—ã—Ö –∏ –º–µ–Ω—å—à–µ 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –±—É–∫–≤ –ø–æ–¥—Ä—è–¥)
def classify_rich_word(word):
     vowels = "–∞–µ—ë–∏–æ—É—ã—ç—é—è"
     vowels_count = sum(1 for letter in word if letter in vowels)

     for i in range(len(word) - 2):
         if word[i] == word[i+1] == word[i+2]:
             return "–ù–µ –±–æ–≥–∞—Ç–æ–µ"
     return "–ë–æ–≥–∞—Ç–æ–µ —Å–ª–æ–≤–æ" if vowels_count > 3 else "–ù–µ –±–æ–≥–∞—Ç–æ–µ"

# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å/—Å—Ç—Ä–æ–∫—É —Å 3-–º—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
def analyze_text(text):
    count_words = len(text.split())
    count_letters = sum(1 for char in text if char.isalpha())
    count_spaces =  text.count(" ")
    return {
        "–°–ª–æ–≤–∞": count_words,
        "–ë—É–∫–≤—ã": count_letters, 
        "–ü—Ä–æ–±–µ–ª—ã": count_spaces
    }

# —Å—á–∏—Ç–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –∫–∞–∂–¥–æ–π –±—É–∫–≤—ã –≤ —Ç–µ–∫—Å—Ç–µ
def letter_frequency(text):
    result = {}

    for char in text.lower():
        if char.isalpha():
            if char in result:
                result[char] +=1
            else:
                result[char] =1
    return result 

# —á–∞—Å—Ç–æ—Ç–∞ —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
def word_frequency(text):
    result = {}
    text = text.lower()
    words = text.split()
    for word in words:
        if word in result:
            result[word] += 1
        else:
            result[word] = 1
    return result

# –∏—â–µ–º —Å–∞–º–æ–µ —á–∞—Å—Ç–æ–µ —Å–ª–æ–≤–æ
def most_common_word(text):   
    text = text.lower()
    clean_text = re.sub(r'[^–∞-—è–∞-z—ë\s]', '', text)
    words = clean_text.split()
    freq = {}
    
    for word in words:
        if word in freq:
          freq[word] +=1
        else:
            freq[word] = 1

    if not words:
        return None
    
    max_count = max(freq.values())
    for word in words:
        if freq[word] == max_count:
            return word

# —É–¥–≤–æ–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏        
def repeat_text(text):
    return text + text

# –ø—Ä–æ–≤–µ—Ä–∫–∞, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç—Å—Ä–æ–∫–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É
def has_upper(text):
    return any(char.isupper() for char in text)

# –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ –ª–∏ —Å–ª–æ–≤–∞ –≤ —Å–ø–∏—Å–∫–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π
def all_capitalized(words):
    return all(word[0].isupper() for word in words if word)
        
def describe_words(words):
    if not words:
        return "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç"
    all_lower = all(word[0].islower() for word in words if word)
    all_upper = all(word[0].isupper() for word in words if word)

    if all_lower:
        return "–í—Å–µ —Å—Ç—Ä–æ—á–Ω—ã–µ"
    elif all_upper:
        return "–í—Å–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ"
    else:
        return "–°–º–µ—à–∞–Ω–Ω—ã–µ"
# –§–ò–ö–°–¢–£–†–ê
# —Ñ–∏–∫—Å—Ç—É—Ä–∞ —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–Ω–∏–≥–∏
@pytest.fixture
def book_data():
    return {
        "title": "–ú–∞—Å—Ç–µ—Ä –∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞", "author": "–ë—É–ª–≥–∞–∫–æ–≤", "pages": 380
    }

# —Ñ–∏–∫—Å—Ç—É—Ä–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@pytest.fixture
def user_info():
    return {"name": "–ê–Ω–Ω–∞", "age": 30, "city": "–ú–æ—Å–∫–≤–∞"}

# —Ñ–∏–∫—Å—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–ª–æ–≤
@pytest.fixture
def words_list():
    return ["–º–æ—Ä–µ", "—Å–æ–ª–Ω—Ü–µ", "–ø–ª—è–∂", "–æ—Ç–¥—ã—Ö", "–≤–æ–ª–Ω–∞"]

# —Ñ–∏–∫—Å—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–ª–æ–≤–∞—Ä–µ–π
@pytest.fixture
def people_data():
    return [
        {"name": "Alice", "age": 30},
        {"name": "Bob", "age": 25},
        {"name": "Charlie", "age": 40}
]

# —Ñ–∏–∫—Å—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤
@pytest.fixture
def products_list():
    return [
         {"name": "Laptop", "price": 1200, "category": "electronics"},
         {"name": "Tomato", "price": 320, "category": "product"},
         {"name": "TV", "price": 4200, "category": "electronics"}
    ]

# —Ñ–∏–∫—Å—Ç—É—Ä–∞ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ–π
@pytest.fixture
def users_list():
    return [
         {"username": "katya_01", "age": 25, "email": "katya@example.com"},
         {"username": "ivan_87", "age": 35, "email": "ivan@example.com"},
         {"username": "guest", "age": 15, "email": ""}
    ]
# —Ñ–∏–∫—Å—Ç—É—Ä–∞: —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤
@pytest.fixture
def movies_list():
    return [
        {"title": "Inception", "rating": 8.8, "genre": "Sci-Fi", "year": 2010},
        {"title": "The Godfather", "rating": 9.2, "genre": "Crime", "year": 1972},
        {"title": "Interstellar", "rating": 8.6, "genre": "Sci-Fi", "year": 2014},
        {"title": "Unknown", "rating": 0, "genre": "Comedy", "year": 2023}  # –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∞–µ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤
    ] 
# —Ñ–∏–∫—Å—Ç—É—Ä–∞ + scope="module"
@pytest.fixture(scope="module")
def film_list():
    print("–°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤")
    return [
        {"title": "Matrix", "year": 1999},
        {"title": "Tenet", "year": 2020}
    ]
# —Ñ–∏–∫—Å—Ç—É—Ä–∞: —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
@pytest.fixture(scope="module")
def users_active():
    print("–°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    return [
        {"username": "admin", "active": True},
        {"username": "guest", "active": False},
        {"username": "moderator", "active": True}
    ]
# –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï –§–ò–ö–°–¢–£–†–´ –ò –ü–ê–†–ê–ú–ï–¢–†–ò–ó–ê–¶–ò–ò
# —Ñ–∏–∫—Å—Ç—É—Ä–∞: —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥
@pytest.fixture(scope="module")
def books_list():
    print("–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥")
    return [
        {"title": "1984", "author": "George Orwell", "year": 1949},
        {"title": "Brave New World", "author": "Aldous Huxley", "year": 1932},
        {"title": "Dune", "author": "Frank Herbert", "year": 1965}

    ]
# –ü–†–û–í–ï–†–ö–ê –ò–°–ö–õ–Æ–ß–ï–ù–ò–ô 
# –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è(KeyError)
def get_price(product):
    return product["price"]

# –∏—â–µ–º –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏, —Å –ø–æ–º–æ—â—å—é with pytest.raises()
def get_author(book):
    return book["author"]

# –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ —Ñ–∏–ª—å–º–∞
def get_rating(movie):
    rating = movie["rating"] # –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å KeyError
    if not isinstance(rating,(int, float)):
        raise TypeError("Rating must be a number")
    if rating < 0 or rating > 10:
        raise ValueError("Rating must be between 0 and 10")
    return rating

# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –∫–Ω–∏–≥–∏
def get_pages(book):
    pages = book["pages"]  # KeyError
    if not isinstance(pages,(int, float)): # TypeError
        raise TypeError("Pages must be a number")
    if pages <= 0 or pages > 2000: # ValueError
        raise ValueError("Pages must be between 1 and 2000")
    return pages

# —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ñ–∏–∫—Å—Ç—É—Ä–∞+ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü–∏—è)
@pytest.fixture(scope="module")
def users_list():
    return [
    {"username": "admin", "age": 35, "email": "admin@example.com"},
    {"username": "guest", "age": 15, "email": ""},
    {"username": "manager", "age": "unknown", "email": "manager@example.com"}
]

# –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏
def get_age(user):
    age = user["age"]
    if not isinstance(age,(int, float)):
        raise TypeError("Age must be a number")
    if age < 0:
        raise ValueError("Age must be between 1 and 60")
    return age
    
# –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞ —Å–ø–∏—Å–∫–µ –∫–Ω–∏–≥
@pytest.fixture(scope="module")
def books_list_by_pages():
    return [
    {"title": "Dune", "pages": 412, "available": True},
    {"title": "1984", "pages": 328, "available": False},
    {"title": "Brave New World", "pages": "many", "available": True}
]
#—Ä–∞–±–æ—Ç–∞ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∫–Ω–∏–≥
def get_pages_of_book(books):
    pages = books["pages"]
    if not isinstance(pages,(int, float)):
        raise TypeError("Pages must be a number")
    if pages <= 0:
        raise ValueError("Pages must be more than 0")
    return pages

# –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü–∏—è + –∏—Å–∫–ª—é—á–µ–Ω–∏—è
def get_discounted_price(product):
    # –ø–æ–ª—É—á–∞–µ–º price, discount –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    price = product["price"]
    discount = product["discount"]
    # –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ price - —á–∏—Å–ª–æ, –∏–Ω–∞—á–µ - –æ—à–∏–±–∫–∞
    if not isinstance(price, (int, float)):
        raise TypeError("Price must be a number")
    # –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ discount - —á–∏—Å–ª–æ, –∏–Ω–∞—á–µ - –æ—à–∏–±–∫–∞
    if not isinstance(discount, (int, float)):
        raise TypeError("Discount must be a number")
    # –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ price > 0(–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)
    if price <= 0:
        raise ValueError("Price  must be positive")
    # –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–∫–∏–¥–∫–∞ –æ—Ç 0 –¥–æ 1, –∏–Ω–∞—á–µ - –æ—à–∏–∏–±–∫–∞
    if discount < 0 or discount >1:
        raise ValueError("Discount must be be between 0 and 1")
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ —Å–∫–∏–¥–∫–æ–π 
    return price - (price * discount)

# –∏—â–µ–º –≤–æ–∑—Ä–∞—Å—Ç (–ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü–∏—è + –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π)
def get_age_person(user):
    age = user["age"]
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
    if not isinstance(age, (int, float)):
        raise TypeError("Age must be a number")
    if age <= 0 :
        raise ValueError("Age must be positive")
    return age

# –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def validate_password(password_list):
    password = password_list["password"]
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
    if not isinstance(password, str):
        raise TypeError("Password must be a string")
    if len(password) < 6:
        raise ValueError("Password must be after 6 symbols")
    if not any(char.isdigit() for char in password):
        raise ValueError("Password must contain at least one digit")
    
    return "Password accepted"

# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
def calculate_shipping(order):
    weight = order["weight"]
    destination = order["destination"]

    if not isinstance(weight,(int, float)):
        raise TypeError("Weight must be a number")
    if weight <=0:
        raise ValueError("Weight must be positive")
    if destination not  in ["local", "international"]:
        raise ValueError("Destination must be 'local' or 'internationsl'")
    if destination == "local":
        return weight * 5
    else:
        return weight * 10

# –Ω–∞–ª–æ–≥ –Ω–∞ –ø–æ–∫—É–ø–∫—É
def calculate_tax(item):
    price = item["price"]
    tax_rate = item["tax_rate"]

    if not isinstance(price, (int, float)):
        raise TypeError("Price must be a number")
    if not isinstance(tax_rate, (int, float)):
        raise TypeError("Tax_rate must be a number")
    if price < 0:
        raise ValueError("Price must be positive")
    if tax_rate < 0:
        raise ValueError("Tax_rate must be positive")
    return price + (price * tax_rate)
# –ü–û–í–¢–û–†–ï–ù–ò–ï
def count_vowels_practice(text):
    vowels = "–∞–µ—ë–∏–æ—É—ã—ç—é—è–ê–ï–Å–ò–û–£–´–≠–Æ–Ø"
    return sum(1 for letter in text if letter in vowels)
def reverse_text_practice(text):
    return text[::-1]
def normalize_text_practice(text):
    return text.strip().lower()

def count_words_practice(text):
    words = text.split()
    return len(words)

def is_title_case(text):
    stripped = text.lstrip()
    if not stripped:
        return False
    return stripped[0].isupper()
def count_unique_words_practice(text):
    words = text.lower().split()
    unique_words = set(words)
    return len(unique_words)
def contains_only_letters_practice(text):
    return text.isalpha()
# —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ –≤ —Å—Ç—Ä–æ–∫–µ
def count_uppercase(text):
    return sum(1 for letter in text if letter.isupper())

@pytest.fixture
def user_data_fixture():
    return {"name": "–ú–∞—Ä–∏–Ω–∞", "role": "QA", "age": 25}

@pytest.fixture
def qa_skills():
    return ["Postman", "PyTest", "Selenium", "SQL"]

@pytest.fixture(scope="module")
def project_info():
    return {"project": "Autotest", "version": 1.0}
     


def check_user_role(role, valid_roles):
    if role in valid_roles:
        return "OK"
    else:
        raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–æ–ª—å")
    
def validate_age(age, min_age):
    if age >= min_age:
        return "–î–æ–ø—É—â–µ–Ω"
    else:
        raise ValueError("–°–ª–∏—à–∫–æ–º –º–æ–ª–æ–¥–æ–π")
    
