# –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É 
def reverse_string(text):
    return text[::-1]

# —Å—á–∏—Ç–∞–µ–º –≥–ª–∞—Å–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–µ
def count_vowels(text):
    vowels = "–∞–µ—ë–∏–æ—É—ã—ç—é—è–ê–ï–Å–ò–û–£–´–≠–Æ–Ø"
    return sum(1 for letter in text if letter in vowels)

# –¥–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π
def capitalize_first(text):
    if not text: #–µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        return ""
    return text[0].upper() + text[1:] # –¥–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π, –æ—Å—Ç–∞–ª—å–Ω–æ–µ - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å 
# –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã
def is_alpha_only(text):
    return text.isalpha()

# –ø—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–æ–π
def is_upper(text):
    return text[:1].isupper()

# —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏–∑ —Å—Ç—Ä–æ–∫
def remove_spaces(text):
    return text.replace(" ", "")

# —É–¥–∞–ª—è–µ–º –≤—Å–µ —Ü–∏—Ñ—Ä—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
def remove_digits(text):
   return ''.join(char for char in text if not char.isdigit())

# –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã
def extract_letters(text):
    return ''.join(char for char in text if char.isalpha())

# –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–∞
def is_palindrome(word):
    word = word.lower().replace(" ", "") # –¥–µ–ª–∞–µ–º –±—É–∫–≤—ã –º–∞–ª–µ–Ω—å–∫–∏–º–∏, —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É –Ω–∏–º–∏
    return word == word[::-1] # —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–ª–æ–≤–æ —Å –µ–≥–æ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–π –≤–µ—Ä—Å–∏–µ–π

#üîç –ø–∞–ª–∏–Ω–¥—Ä–æ–º—ã
# –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
def is_palindrome_sentence(text):
    clean = ''.join(c.lower() for c in text if c.isalpha())
    return clean == clean[::-1]


# –¥–µ–ª–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –≤ —Å—Ç—Ä–æ–∫–µ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã, –æ—Å—Ç–∞–ª—å–Ω—ã–µ - —Å—Ç—Ä–æ—á–Ω—ã–µ
def capitalize_word(text):
    return ' '.join(word.capitalize() for word in text.split())

# –∏—â–µ–º —Å–ª–æ–≤–∞, –¥–ª–∏–Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ min_length
def filtered_by_length(text, min_length):
    words = text.split()
    return [word for word in words if len(word) >= min_length]

# —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–ª–∏–Ω–µ –∏ –ø–µ—Ä–≤–æ–π –±—É–∫–≤–µ
def filtered_by_length_and_start(text, min_length, start_letter):
    words = text.split()
    return [word for word in words if len(word)>= min_length
            and word.startswith(start_letter)]


# —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø—Ä–µ–¥–ª–µ–Ω–Ω–æ–π –¥–ª–∏–Ω—ã, –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –Ω–∞ –±—É–∫–≤—É –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –±—É–∫–≤—É
def filter_advanced(text, min_length, start_letter, forbidden_letter):
    words = text.split()
    return [word for word in words if len(word)>= min_length
            and word.startswith(start_letter)
            and forbidden_letter not in word
            ]

# —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –≤ —Å—Ç—Ä–æ–∫–µ
def invert_words(text):
    words = text.split()
    return ' '.join (word[::-1] for word in words)


# —Å—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∞—Å—å –±—É–∫–≤–∞ –≤ —Å—Ç—Ä–æ–∫–µ –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞
def count_letter_frequency(text, letter):
    text = text.lower()
    letter = letter.lower()
    return sum(1 for char in text if char == letter)

# –ø—Ä–∏–Ω–∏–º–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
def analyze_string(text):
    if text.isspace(): # ! –≤–∞–∂–µ–Ω –ø–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è 
        return "–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã"
    elif not text.strip():
        return "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞"
    elif text.isdigit():
        return "–¶–∏—Ñ—Ä—ã"
    elif text.isalpha():
        return "–ë—É–∫–≤—ã"
    elif not any(char.isalnum() for char in text): #–Ω–µ—Ç –Ω–∏ –±—É–∫–≤, –Ω–∏ —Ü–∏—Ñ—Ä
        return "–¢–æ–ª—å–∫–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã"
    else:
        return "–°–º–µ—à–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞"

# –∞–Ω–∞–ª–∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞ —Å—Ç—Ä–æ–∫–∏
def analyze_case(text):
    if text.isupper():
        return "–í—Å–µ –±—É–∫–≤—ã –∑–∞–≥–ª–∞–≤–Ω—ã–µ"
    elif text.islower():
        return "–í—Å–µ –±—É–∫–≤—ã —Å—Ç—Ä–æ—á–Ω—ã–µ"
    elif not any(char.isalpha() for char in text):
        return "–ù–µ—Ç –±—É–∫–≤"
    else:
        return "–°–º–µ—à–∞–Ω–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä"

# –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏ –∏ —Ç–æ—á–∫–∞ –≤ –∫–æ–Ω—Ü–µ
def describe_string(text):
    if text[0].isupper() and text.endswith("."):
        return "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
    elif text[0].isupper() and not text.endswith("."):
        return "–ù–µ—Ç —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ"
    elif not text[0].isupper() and text.endswith("."):
        return "–ù–µ—Ç –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã –≤ –Ω–∞—á–∞–ª–µ"
    else:
        return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞"

# –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–µ–º —Å–ª–æ–≤–æ –ø–æ –≥–ª–∞—Å–Ω—ã–º,—Å–æ–≥–ª–∞—Å–Ω—ã–º
def classify_word(word):
    vowels = "–∞–µ—ë–∏–æ—É—ã—ç—é—è"
    consonants = "–±–≤–≥–¥–∂–∑–π–∫–ª–º–Ω–ø—Ä—Å—Ç—Ñ—á—Ü—á—à—â"
    letters = [char.lower() for char in word if char.isalpha()]
    
    if not letters:
        return "–ù–µ—Ç –±—É–∫–≤"
    elif all(char in vowels for char in letters):
        return "–¢–æ–ª—å–∫–æ –≥–ª–∞—Å–Ω—ã–µ"
    elif all(char in consonants for char in letters):
        return "–¢–æ–ª—å–∫–æ —Å–æ–≥–ª–∞—Å–Ω—ã–µ"
    else:
        return "–°–º–µ—à–∞–Ω–Ω–æ–µ"
    
# –ò—â–µ–º "–±–æ–≥–∞—Ç–æ–µ —Å–ª–æ–≤–æ"(–µ—Å–ª–∏ –±–æ–ª—å—à–µ 3 –≥–ª–∞—Å–Ω—ã—Ö –∏ –º–µ–Ω—å—à–µ 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –±—É–∫–≤ –ø–æ–¥—Ä—è–¥)
def classify_rich_word(word):
     vowels = "–∞–µ—ë–∏–æ—É—ã—ç—é—è"
     vowels_count = sum(1 for letter in word if letter in vowels)

     for i in range(len(word) - 2):
         if word[i] == word[i+1] == word[i+2]:
             return "–ù–µ –±–æ–≥–∞—Ç–æ–µ"
     return "–ë–æ–≥–∞—Ç–æ–µ —Å–ª–æ–≤–æ" if vowels_count > 3 else "–ù–µ –±–æ–≥–∞—Ç–æ–µ"


 
